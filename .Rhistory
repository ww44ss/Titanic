?ncol
time1<-proc.time()
time2<-proc.time()
time2-time1
a<-time2-time1
a[1]
a[3]
a[[3,1]]
b<-a[2]
b
a[3]
a[1]
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
head(segmentationOriginal)
test<-segmentationOriginal[segmentationOriginal$Case=="Test",]
train<-segmentationOriginal[segmentationOriginal$Case=="Train",]
dim(test)
dim(test)
dim(train)
set.seed(125)
colnames(test)
set.seed(125)
modFit <- train(Class ~ .,method="rpart",data=training)
modFit <- train(Class ~ .,method="rpart",data=train)
library(rattle)
install.packages("rattle")
library(rattle)
fancyRpartPlot(modFit$finalModel)
install.packages("rpart.plot")
fancyRpartPlot(modFit$finalModel)
?classCenter
??classCenter
install.packages("randomForest")
rfNews()
load(randomForest)
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
data(olive)
head(olive)
olive = olive[,-1]
head(olive)
modFit <- train(Area ~ .,method="rpart",data=olive)
require(caret)
modFit <- train(Area ~ .,method="rpart",data=olive)
plot(modFit$$finalModel, uniform=TRUE)
plot(modFit$finalModel, uniform=TRUE)
plot(modFit$finalModel, uniform=TRUE, main="X")
text(modFit$finalModel, use.n=TRUE, all=TRUE, cex=0.8)
newdata = as.data.frame(t(colMeans(olive)))
?predict
modPredict<-predict(modFit, newdata)
head(modPredict)
str(modPredict)
head(newdata)
?tree
require(tree)
?tree
install.packages("tree")
?tree
modTree<-tree(Area~., data=olive)
treePredict<-predict(modtree, newdata=newdata)
treePredict<-predict(modTree, newdata=newdata)
modTree<-tree(Area~., data=olive)
require(tree)
modTree<-tree(Area~., data=olive)
treePredict<-predict(modTree, newdata=newdata)
treePredict
?qplot
shiny()
library(shiny)
library(ElemStatLearn)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
str(trainSA)
SAmodel<-glm(chd~alcohol+obesity+tobacco+typea+ldl, family="binomial", data=trainSA)
summary(SAModel)
summary(SAmodel)
SApredict<-predict(SAmodel, testSA)
confusionMatrix(testSA$chd, SApredict)
library(caret)
confusionMatrix(testSA$chd, SApredict)
SApredict
testSA$chd
missClass(testSA$chd, SApredict)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(testSA$chd, SApredict)
SAtestpredict<-predict(SAmodel, testSA)
SAtestpredict<-predict(SAmodel, testSA)
SAtrainpredict<-predict(SAmodel, trainSA)
SAtestpredict<-predict(SAmodel, testSA)
SAtrainpredict<-predict(SAmodel, trainSA)
SAtestpredict
hist(as.vector(SAtestpredict))
SAmodel<-glm(chd~alcohol+obesity+tobacco+typea+ldl-1, family="binomial", data=trainSA)
summary(SAmodel)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
SAtestpredict<-predict(SAmodel, testSA)
SAtrainpredict<-predict(SAmodel, trainSA)
hist(as.vector(SAtestpredict))
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
str(trainSA)
str(trainSA)
SAmodel<-glm(chd~alcohol+obesity+tobacco+typea+ldl, family="binomial", data=trainSA)
summary(SAmodel)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
SAtestpredict<-predict(SAmodel, testSA)
SAtrainpredict<-predict(SAmodel, trainSA)
testSA$chd
hist(as.vector(SAtestpredict))
hist(as.vector(testSA$chd))
missClass(testSA$chd, SApredict)
missClass(testSA$chd, SAtestpredict)
missClass(trainSA$chd, SAtrainpredict)
hist(as.vector(testSA$chd), fill="lightblue")
hist(as.vector(testSA$chd), col="lightblue")
SAmodel<-glm(chd~alcohol+obesity+tobacco+typea+ldl-1, family="binomial", data=trainSA)
summary(SAmodel)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
SAtestpredict<-predict(SAmodel, testSA)
SAtrainpredict<-predict(SAmodel, trainSA)
testSA$chd
hist(as.vector(SAtestpredict))
hist(as.vector(testSA$chd), col="lightblue")
#library(caret)
#confusionMatrix(testSA$chd, SAtestpredict)
#confusionMatrix(trainSA$chd, SAtrainpredict)
missClass(testSA$chd, SAtestpredict)
missClass(trainSA$chd, SAtrainpredict)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
str(trainSA)
str(trainSA)
set.seed(13234)
SAmodel<-glm(chd~alcohol+obesity+tobacco+typea+ldl-1, family="binomial", data=trainSA)
summary(SAmodel)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
SAtestpredict<-predict(SAmodel, testSA)
SAtrainpredict<-predict(SAmodel, trainSA)
testSA$chd
hist(as.vector(SAtestpredict))
hist(as.vector(testSA$chd), col="lightblue")
#library(caret)
#confusionMatrix(testSA$chd, SAtestpredict)
#confusionMatrix(trainSA$chd, SAtrainpredict)
missClass(testSA$chd, SAtestpredict)
missClass(trainSA$chd, SAtrainpredict)
?glm
?train
SAmodelt<-train(formula, data=trainSA, method="glm", family="binomial")
SAheart$chd<-as.factor(SAheart$chd)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
str(trainSA)
str(trainSA)
set.seed(13234)
formula<-chd~alcohol+obesity+tobacco+typea+ldl
SAmodel<-glm(formula, family="binomial", data=trainSA)
SAmodelt<-train(formula, data=trainSA, method="glm")
summary(SAmodel)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
SAtestpredict<-predict(SAmodel, testSA)
SAtrainpredict<-predict(SAmodel, trainSA)
testSA$chd
hist(as.vector(SAtestpredict))
hist(as.vector(testSA$chd), col="lightblue")
hist(as.numeric(testSA$chd), col="lightblue")
hist(as.numeric(testSA$chd-1), col="lightblue")
hist(as.numeric(testSA$chd)-1, col="lightblue")
missClass(testSA$chd, SAtestpredict)
missClass(trainSA$chd, SAtrainpredict)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
str(vowel.train)
vowel.train$y<-as.factor(vowel.train$y)
vowel.test$y<-as.factor(vowel.test$y)
set.seed(33833)
require(caret)
model1 <- train(y~., data = vowel.train, method="rf")
varimp(model1)
?varimp
??varimp
varImp(model1)
?varIMP
varImp
?varImp
varImp(model1, scale=FALSE)
set.seed(33833)
model1 <- train(y~., data = vowel.train, method="rf")
varImp(model1, scale=FALSE)
model2 <- train(y~., data = vowel.train, method="rf")
varImp(model2)
model2 <- train(y~., data = vowel.test, method="rf")
varImp(model2)
varImp(model1, value="gcv")
varImp(model1, value="nsubsets")
varImp(model1, value="rss")
set.seed(33833)
varImp(model1, value="rss")
varImp(model2)
model1 <- train(y~., data = vowel.train, method="rf", importance=TRUE)
set.seed(33833)
model1 <- train(y~., data = vowel.train, method="rf", importance=TRUE)
varImp(model1)
varImp(model1, type=2)
library(ElemStatLearn)
library(caret)
data(vowel.train)
data(vowel.test)
vowel.train$y<-as.factor(vowel.train$y)
vowel.test$y<-as.factor(vowel.test$y)
set.seed(33833)
model1 <- train(y~., data = vowel.train, method="rf", importance=TRUE)
model2 <- train(y~., data = vowel.train, method="gbm", importance=TRUE)
model2 <- train(y~., data = vowel.train, method="gbm", importance=TRUE)
str(vowel.test)
predict1<-predict(model1, vowel.test)
predict2<-predict(model2, vowel.test)
library(ElemStatLearn)
library(caret)
data(vowel.train)
data(vowel.test)
vowel.train$y<-as.factor(vowel.train$y)
vowel.test$y<-as.factor(vowel.test$y)
set.seed(33833)
model1 <- train(y~., data = vowel.train, method="rf", importance=TRUE)
model2 <- train(y~., data = vowel.train, method="gbm", verbose=TRUE)
predict1<-predict(model1, vowel.test)
predict2<-predict(model2, vowel.test)
length(predict1)
length(predict2)
predict1(1:10)
predict1[1:10]
predict2[1:10]
agree<-predict1[predict1==predict2]
length(agree)
confusionMatrix(Test$y, predict1)
confusionMatrix(vowel.test$y, predict1)
confusionMatrix(vowel.test$y, predict2)
setwd("/Users/winstonsaunders/Documents/TitanicKaggle")
## get data sets
## use read data steps from the dude
readData <- function(path.name, file.name, column.types, missing.types) {
read.csv( url( paste(path.name, file.name, sep="") ),
colClasses=column.types,
na.strings=missing.types )
}
Titanic.path <- "https://raw.github.com/ww44ss/Titanic"
train.data.file <- "train.csv"
test.data.file <- "test.csv"
missing.types <- c("NA", "")
train.column.types <- c('integer',   # PassengerId
'factor',    # Survived
'factor',    # Pclass
'character', # Name
'factor',    # Sex
'numeric',   # Age
'integer',   # SibSp
'integer',   # Parch
'character', # Ticket
'numeric',   # Fare
'character', # Cabin
'factor'     # Embarked
)
test.column.types <- train.column.types[-2]     # # no Survived column in test.csv
training <- readData(Titanic.path, train.data.file,
train.column.types, missing.types)
Titanic.path <- "https://github.com/ww44ss/Titanic"
train.data.file <- "train.csv"
test.data.file <- "test.csv"
missing.types <- c("NA", "")
train.column.types <- c('integer',   # PassengerId
'factor',    # Survived
'factor',    # Pclass
'character', # Name
'factor',    # Sex
'numeric',   # Age
'integer',   # SibSp
'integer',   # Parch
'character', # Ticket
'numeric',   # Fare
'character', # Cabin
'factor'     # Embarked
)
test.column.types <- train.column.types[-2]     # # no Survived column in test.csv
training <- readData(Titanic.path, train.data.file,
train.column.types, missing.types)
Titanic.path <- "http://github.com/ww44ss/Titanic"
training <- readData(Titanic.path, train.data.file, train.column.types, missing.types)
Titanic.path <- "http://raw.github.com/ww44ss/Titanic"
training <- readData(Titanic.path, train.data.file, train.column.types, missing.types)
Titanic.path <- "http://raw.github.com/ww44ss/Titanic/"
Titanic.path <- "https://raw.github.com/ww44ss/Titanic/"
library(RCurl)
training <- readData(Titanic.path, train.data.file, train.column.types, missing.types)
Titanic.path
Titanic.path <- "http://raw.github.com/ww44ss/Titanic/"
training <- readData(Titanic.path, train.data.file, train.column.types, missing.types)
library(RCurl)
readData <- function(path.name, file.name, column.types, missing.types) {
read.csv( getURL( paste(path.name, file.name, sep="") ),
colClasses=column.types,
na.strings=missing.types )
}
Titanic.path <- "http://raw.github.com/ww44ss/Titanic/"
train.data.file <- "train.csv"
test.data.file <- "test.csv"
missing.types <- c("NA", "")
train.column.types <- c('integer',   # PassengerId
'factor',    # Survived
'factor',    # Pclass
'character', # Name
'factor',    # Sex
'numeric',   # Age
'integer',   # SibSp
'integer',   # Parch
'character', # Ticket
'numeric',   # Fare
'character', # Cabin
'factor'     # Embarked
)
test.column.types <- train.column.types[-2]     # # no Survived column in test.csv
training <- readData(Titanic.path, train.data.file, train.column.types, missing.types)
getURL( paste(path.name, file.name, sep="")
)
path.name
read.csv( url( paste0(Titanic.path, train.data.file) )
)
library(RCurl)
Titanic.path <- "https://raw.github.com/ww44ss/Titanic/"
train.data.file <- "train.csv"
Titanic.path <- "https://raw.github.com/ww44ss/Titanic/master/"
read.csv( url( paste0(Titanic.path, train.data.file) )
)
close.connection
close.connection()
X<- getURL( paste0(Titanic.path, train.data.file) )
y<-read.csv(text=X)
y<-read.csv(X)
?read.csv
X<- getURL( paste0(Titanic.path, train.data.file) )
y<-read.csv(text=X)
y<-read.csv(file=X)
paste0(Titanic.path, train.data.file)
X<- url( paste0(Titanic.path, train.data.file) )
y<-read.csv(text=X)
y<-read.csv(X)
flush(con)
isOpen()
isOpen(4)
isOpen(con=4)
?read.csv
library(RCurl)
readData <- function(path.name, file.name, column.types, missing.types) {
read.csv( url( paste0(path.name, file.name) ),
colClasses=column.types,
na.strings=missing.types )
}
Titanic.path <- "https://raw.github.com/ww44ss/Titanic/master/"
train.data.file <- "train.csv"
test.data.file <- "test.csv"
Titanic.path <- "https://raw.github.com/ww44ss/TitanicKaggle/master/"
train.data.file <- "train.csv"
test.data.file <- "test.csv"
missing.types <- c("NA", "")
train.column.types <- c('integer',   # PassengerId
'factor',    # Survived
'factor',    # Pclass
'character', # Name
'factor',    # Sex
'numeric',   # Age
'integer',   # SibSp
'integer',   # Parch
'character', # Ticket
'numeric',   # Fare
'character', # Cabin
'factor'     # Embarked
)
test.column.types <- train.column.types[-2]     # # no Survived column in test.csv
training <- readData(Titanic.path, train.data.file, train.column.types, missing.types)
Titanic.path <- "http://raw.github.com/ww44ss/TitanicKaggle/master/"
training <- readData(Titanic.path, train.data.file, train.column.types, missing.types)
Titanic.path <- "http://raw.github.com/ww44ss/Titanic/master/"
train.data.file <- "train.csv"
test.data.file <- "test.csv"
missing.types <- c("NA", "")
train.column.types <- c('integer',   # PassengerId
'factor',    # Survived
'factor',    # Pclass
'character', # Name
'factor',    # Sex
'numeric',   # Age
'integer',   # SibSp
'integer',   # Parch
'character', # Ticket
'numeric',   # Fare
'character', # Cabin
'factor'     # Embarked
)
test.column.types <- train.column.types[-2]     # # no Survived column in test.csv
training <- readData(Titanic.path, train.data.file, train.column.types, missing.types)
paste0(path.name, file.name)
paste0(Titanic.path, train.csv)
paste0(Titanic.path, train.data.file)
url(paste0(Titanic.path, train.data.file))
read.csv(url(paste0(Titanic.path, train.data.file)))
Titanic.path <- "http://raw.githubusercontent.com/ww44ss/Titanic/master/"
read.csv(url(paste0(Titanic.path, train.data.file)))
Titanic.path <- "https://raw.githubusercontent.com/ww44ss/Titanic/master/"
read.csv(url(paste0(Titanic.path, train.data.file)))
?read.csv
open(url(paste0(Titanic.path, train.data.file)))
library(RCurl)
readData <- function(path.name, file.name, column.types, missing.types) {
myData<-getURL( url( paste0(path.name, file.name) ))
read.csv(textConnection(myData),
colClasses=column.types,
na.strings=missing.types )
}
Titanic.path <- "https://raw.githubusercontent.com/ww44ss/Titanic/master/"
train.data.file <- "train.csv"
Titanic.path <- "https://raw.github.com/ww44ss/Titanic/master/"
train.data.file <- "train.csv"
test.data.file <- "test.csv"
missing.types <- c("NA", "")
train.column.types <- c('integer',   # PassengerId
'factor',    # Survived
'factor',    # Pclass
'character', # Name
'factor',    # Sex
'numeric',   # Age
'integer',   # SibSp
'integer',   # Parch
'character', # Ticket
'numeric',   # Fare
'character', # Cabin
'factor'     # Embarked
)
test.column.types <- train.column.types[-2]     # # no Survived column in test.csv
training <- readData(Titanic.path, train.data.file, train.column.types, missing.types)
myData<-getURL( url( paste0(Titanic.path, train.csv) ))
myData<-getURL( url( paste0(Titanic.path, train.data.file) ))
paste0(Titanic.path, train.data.file)
fn<-paste0(Titanic.path, train.data.file)
fn
dat <- getURL(url(fn))
data <-getURL(fn)
head(data)
data<-read.csv(textConnection(data))
str(data)
dat<-getURL(fn)
fn
dat
dat<-getURL("https://raw.githubusercontent.com/ww44ss/Titanic/master/train.csv")
str(dat)
dat<-read.csv(dat)
dat<-read.csv(textConnection(dat))
str(dat)
library(RCurl)
readData <- function(path.name, file.name, column.types, missing.types) {
myData<-getURL(  paste0(path.name, file.name) )
read.csv(textConnection(myData),
colClasses=column.types,
na.strings=missing.types )
}
Titanic.path <- "https://raw.githubusercontent.com/ww44ss/Titanic/master/"
train.data.file <- "train.csv"
test.data.file <- "test.csv"
missing.types <- c("NA", "")
train.column.types <- c('integer',   # PassengerId
'factor',    # Survived
'factor',    # Pclass
'character', # Name
'factor',    # Sex
'numeric',   # Age
'integer',   # SibSp
'integer',   # Parch
'character', # Ticket
'numeric',   # Fare
'character', # Cabin
'factor'     # Embarked
)
test.column.types <- train.column.types[-2]     # # no Survived column in test.csv
training <- readData(Titanic.path, train.data.file, train.column.types, missing.types)
testing <-  readData(Titanic.path, test.data.file,
test.column.types, missing.types)
trainingRaw<-training
testingRaw<-testing
install.packages(c("dplyr", "forecast", "httr", "lazyeval", "manipulate", "quantreg", "rattle", "rstudioapi", "SparseM", "stabs", "swirl"))
install.packages(c("boot", "caret", "digest", "earth", "foreign", "httr", "kernlab", "MASS", "nlme", "plotmo", "swirl", "TH.data"), lib="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
r.version()
version()
R.Version()
