train1$Age2 <- 16*round(train1$Age/16,0)
test1$Age2 <- 16*round(test1$Age/16,0)
names(training)
train1 <- train1[,c("Survived","Sex", "Age", "Fare", "Pclass")]
test1 <-   test1[,c("Survived","Sex", "Age", "Fare", "Pclass")]
train1<-training[xx,]
test1<-training[-xx,]
train1 <- train1[,c("Survived","Sex", "Age", "Fare", "Pclass")]
test1 <-   test1[,c("Survived","Sex", "Age", "Fare", "Pclass")]
train1$Age2 <- 16*round(train1$Age/16,0)
test1$Age2 <- 16*round(test1$Age/16,0)
control1 <- trainControl(method = "cv")
## model using random forest
model1 <- train(Survived~., data = train1, method="rf", trControl = control1, prox=FALSE)
prediction1 <- predict(model1, test1)
prediction1[prediction1<0.5]<-0
prediction1[prediction1>=0.5]<-1
prediction1<-as.factor(prediction1)
table(prediction1, test1$Survived)
confusionMatrix(test1$Survived, prediction1)
?plot
?ggplot
names(training)
training <- read.csv("train.csv", na.strings=c("NA", ""))
testing <- read.csv("test.csv", na.strings=c("NA", ""))
trainingRaw<-training
testingRaw<-testing
medianAge<-median(training$Age[is.na(training$Age)==FALSE])
medianMaleAge<-median(training$Age[training$Sex=="male"&is.na(training$Age)==FALSE])
medianFemaleAge<-median(training$Age[training$Sex=="female"&is.na(training$Age)==FALSE])
## substitute median ages based on sex
training$Age[is.na(training$Age)&training$Sex=="male"]<-medianMaleAge
training$Age[is.na(training$Age)&training$Sex=="female"]<-medianFemaleAge
testing$Age[is.na(testing$Age)&testing$Sex=="male"]<-medianMaleAge
testing$Age[is.na(testing$Age)&testing$Sex=="female"]<-medianFemaleAge
require(ggplot2)
p<-ggplot(testing, aes(x=Pclass, y = Age, color=factor(Sex)))+geom_point()
p
p<-ggplot(testing, aes(x=Pclass, y = Age, color=factor(Sex)))+geom_point()
p
p<-ggplot(testing, aes(Pclass, Age, color=factor(Sex))) + geom_point()
p
p<-ggplot(testing, aes(Pclass, Age)) + geom_point()
p
p<-ggplot(testing, aes(Pclass, Age)) + geom_boxplot()
p
p<-ggplot(testing, aes(factor(Pclass), Age)) + geom_boxplot()
p
training<-trainingRaw
testing<-testingRaw
## look at data
require(ggplot2)
p<-ggplot(testing, aes(factor(Pclass), Age)) + geom_boxplot()
p
p<-ggplot(testing, aes(factor(Pclass), Age)) + geom_boxplot()
p<-p+facet_grid(Sex~.)
p
p<-ggplot(testing, aes(factor(Pclass), Age)) + geom_boxplot()
p<-p+facet_grid(.~Sex)
p<-p+ggtitle("Age and Passenger Class")
p
require(ggplot2)
p<-ggplot(training, aes(factor(Pclass), Age)) + geom_boxplot()
p<-p+facet_grid(.~Sex)
p<-p+ggtitle("Age and Passenger Class")
p
agemodel<-glm(Age~1/Pclass,training)
~glm
?glm
agemodel<-glm(Age~1/Pclass,family=gaussian, data=training)
agePredict<-predict(agemodel, training$Age)
summary(agemodel)
agePredict<-predict(agemodel, training)
error=agepredict-training$Age
error=agePredict-training$Age
rmse=sqrt(mean(error^2))
rmse
agePredict
agePredict<-predict(agemodel, training)
agePredict
summary(agemodel)
agemodel<-glm(Age~1/Pclass, data=training)
trainfull<-training[is.na(traing$Age)=FALSE, ]
trainfull<-training[is.na(traing$Age)==FALSE, ]
trainfull<-training[is.na(training$Age)==FALSE, ]
agePredict<-predict(agemodel, trainfull)
error=agePredict-trainfull$Age
rmse=sqrt(mean(error^2))
rmse
rmseModel=sqrt(mean(error^2))
rmseModel
error=median(trainfull$Age) - trainfulff$Age
error=median(trainfull$Age) - trainfull$Age
rmseMedian=sqrt(mean(error^2))
rmseMedian
agemodel<-glm(Age~1/Pclass+Sex, data=training)
trainfull<-training[is.na(training$Age)==FALSE, ]
agePredict<-predict(agemodel, trainfull)
error=agePredict-trainfull$Age
rmseModel=sqrt(mean(error^2))
rmseModel
error=mean(trainfull$Age) - trainfull$Age
rmseMedian=sqrt(mean(error^2))
rmseMedian
conf<-confusionMatrix(test1$Survived, prediction1)
conf$Accuracy
str(conf)
conf
conf$overall
conf$overall[1]
conf$table
training$Age[is.na(training$Age)&training$Sex=="male"]<-meanMaleAge
trainfull<-training[is.na(training$Age)==FALSE, ]
## fit model
agemodel<-glm(Age~Pclass+Sex, data=trainfull)
## test model
## make preductions
agePredict<-predict(agemodel, trainfull)
## calculate rsme
error=agePredict-trainfull$Age
rmseModel=sqrt(mean(error^2))
## compare to rsme of using just mean as predictor
error=mean(trainfull$Age) - trainfull$Age
rmseModel
rmseMean=sqrt(mean(error^2))
rmseMean
rmseMean
require(caret)
set.seed(8675309)
xx <- createDataPartition(y=training$Survived, p=0.80, list=FALSE)
##Define training and test sets
train1<-training[xx,]
test1<-training[-xx,]
train1 <- train1[,c("Survived","Sex", "Age", "Fare", "Pclass")]
test1 <-   test1[,c("Survived","Sex", "Age", "Fare", "Pclass")]
train1[is.na(train1$Age)==TRUE]<- predict(agemodel, as.data.frame(train1$Pclass, train1$Sex ))
for(i in 1:length(train1)) {
if (train1$Age[i]==NA) then {
train1$Age[1]<-predict(agemodel, as.data.frame(train1$Sex[1], train1$Pclass[1]))
names(train1)
train1$Age[1]<-predict(agemodel, as.data.frame(train1$Sex[1], train1$Pclass[1]))
train1$Age[1]<-predict(agemodel, c(train1$Sex[1], train1$Pclass[1]))
train1$Pclass[1]
as.data.frame(train1$Sex[1], train1$Pclass[1])
as.data.frame(cbind(train1$Sex, train1$Pclass))[1,]
as.data.frame(cbind(train1$Sex, train1$Pclass))[1,]
train1$Age[2]<-predict(agemodel, train1[2,])
train1$Age[2]
require(caret)
set.seed(8675309)
xx <- createDataPartition(y=training$Survived, p=0.80, list=FALSE)
##Define training and test sets
train1<-training[xx,]
test1<-training[-xx,]
## look at data
require(ggplot2)
p<-ggplot(train1, aes(factor(Pclass), Age)) + geom_boxplot()
p<-p+facet_grid(.~Sex)
p<-p+ggtitle("Age and Passenger Class")
p
trainfull<-train1[is.na(train1$Age)==FALSE, ]
testfull<-test1[is.na(train1$Age)==FALSE, ]
## fit model dependent on Pclass and Sex
agemodel<-glm(Age~Pclass+Sex, data=trainfull)
## test model
## make preductions
agePredict<-predict(agemodel, trainfull)
## calculate rsme
error=agePredict-trainfull$Age
rmseModel=sqrt(mean(error^2))
## compare to rsme of using just mean as predictor
error=mean(trainfull$Age) - trainfull$Age
rmseMean=sqrt(mean(error^2))
rmseMean
rmseModel
ageTestPredict<-predict(agemodel, testfull)
test1$AgeModel<-ageTestPredict
ageTestPredict<-predict(agemodel, test1)
test1$AgeModel<-ageTestPredict
head(test1)
function(x) x$Age<-x$AgeModel
f<-function(x) x$Age<-x$AgeModel
f<-function(x) x$Age<-x$AgeModel
train1<-apply(train1[train1[is.na(train1$Age)==TRUE]], 1, f)
ageTrainPredict<-predict(agemodel, train1)
train1$AgeModel<-ageTrainPredict
head(train1)
f<-function(x) x$Age<-x$AgeModel
f(train1[6,])
head(train1)
train[6,]
train1[6,]
train1[5,]
f(train1[5,])
train1[5,]
f<-function(x) Age<-AgeModel
f(train1[5,])
f<-function(x) x$Age<-x$AgeModel
{x$Age<-x$AgeModel
f<-function(x)
{x$Age<-x$AgeModel
x}
f(train1[5,])
{x$Age<-x$AgeModel}
f<-function(x)  {x$Age<-x$AgeModel}
training<-trainingRaw
testing<-testingRaw
require(caret)
set.seed(8675309)
xx <- createDataPartition(y=training$Survived, p=0.80, list=FALSE)
##Define training and test sets
train1<-training[xx,]
test1<-training[-xx,]
trainfull<-train1[is.na(train1$Age)==FALSE, ]
testfull<-test1[is.na(train1$Age)==FALSE, ]
## fit model dependent on Pclass and Sex
agemodel<-glm(Age~Pclass+Sex, data=trainfull)
## test model
## make preductions
agePredict<-predict(agemodel, trainfull)
## calculate rsme
error=agePredict-trainfull$Age
rmseModel=sqrt(mean(error^2))
## compare to rsme of using just mean as predictor
error=mean(trainfull$Age) - trainfull$Age
rmseMean=sqrt(mean(error^2))
rmseMean
```
ageTestPredict<-predict(agemodel, test1)
test1$AgeModel<-ageTestPredict
ageTrainPredict<-predict(agemodel, train1)
train1$AgeModel<-ageTrainPredict
f<-function(x)  {x$Age<-x$AgeModel}
train1[5,]
f(train1[5,])
train1[5,]
f<-function(x)  {x$Age<-x$AgeModel
x}
train1[5,]
f(train1[5,])
train1<-apply(train1[train1[is.na(train1$Age)==TRUE],], 1, f)
train1[is.na(train1$Age)==TRUE,"Age"]<-train1[is.na(train1$Age)==TRUE,"AgeModel"]
train1$Age
test1[is.na(test1$Age)==TRUE,"Age"]<-test1[is.na(test1$Age)==TRUE,"AgeModel"]
control1 <- trainControl(method = "cv")
## model using random forest
model1 <- train(Survived~Age+Sex+Pclass, data = train1, method="rf", trControl = control1, prox=FALSE)
prediction1 <- predict(model1, test1)
prediction1[prediction1<0.5]<-0
prediction1[prediction1>=0.5]<-1
prediction1<-as.factor(prediction1)
table(prediction1, test1$Survived)
confusionMatrix(test1$Survived, prediction1)
head(testing[,c("Survived", "Age", "Sex")])
testing[1:6,c("Survived", "Age", "Sex")]
training <- read.csv("train.csv", na.strings=c("NA", ""))
testing <- read.csv("test.csv", na.strings=c("NA", ""))
trainingRaw<-training
testingRaw<-testing
meanAge<-mean(training$Age[is.na(training$Age)==FALSE])
meanMaleAge<-mean(training$Age[training$Sex=="male"&is.na(training$Age)==FALSE])
meanFemaleAge<-mean(training$Age[training$Sex=="female"&is.na(training$Age)==FALSE])
## substitute median ages based on sex
training$Age[is.na(training$Age)&training$Sex=="male"]<-meanMaleAge
training$Age[is.na(training$Age)&training$Sex=="female"]<-meanFemaleAge
testing$Age[is.na(testing$Age)&testing$Sex=="male"]<-meanMaleAge
testing$Age[is.na(testing$Age)&testing$Sex=="female"]<-meanFemaleAge
```
```{r}
testing[1:6,c("Survived", "Age", "Sex")]
head(testing)
training[1:6,c("Survived", "Age", "Sex")]
names(train1)
training<-trainingRaw
testing<-testingRaw
require(caret)
set.seed(8675309)
xx <- createDataPartition(y=training$Survived, p=0.70, list=FALSE)
train1<-training[xx,]
test1<-training[-xx,]
trainfull<-train1[is.na(train1$Age)==FALSE, ]
testfull<-test1[is.na(train1$Age)==FALSE, ]
## fit model dependent on Pclass and Sex
agemodel<-glm(Age~Pclass+Sex, data=trainfull)
agePredict<-predict(agemodel, trainfull)
## calculate rsme
error=agePredict-trainfull$Age
rmseModel=sqrt(mean(error^2))
## compare to rsme of using just mean as predictor
error=mean(trainfull$Age) - trainfull$Age
rmseMean=sqrt(mean(error^2))
ageTestPredict<-predict(agemodel, test1)
test1$AgeModel<-ageTestPredict
ageTrainPredict<-predict(agemodel, train1)
train1$AgeModel<-ageTrainPredict
## Fill in NA's with Model values
train1[is.na(train1$Age)==TRUE,"Age"]<-train1[is.na(train1$Age)==TRUE,"AgeModel"]
test1[is.na(test1$Age)==TRUE,"Age"]<-test1[is.na(test1$Age)==TRUE,"AgeModel"]
train1$Helper<-if (train1$SibSp+train$Parch == 0) {0} else {1}
train1$Helper<- function(x) if (train1$SibSp+train$Parch == 0) {x<-0} else {x<-1}
train1$Helper<- function(x) if (train1$SibSp+train1$Parch == 0) {x<-0} else {x<-1}
train1$Helper <- train1$SibSp+train1$Parch
train1$Helper <- round((train1$SibSp+train1$Parch)/(train1$SibSp+train1$Parch+.01), 0)
table(train1$Helper)
test1$Helper <- round((test1$SibSp+test1$Parch)/(test1$SibSp+test1$Parch+.01), 0)
table(test1$Helper)
train1[Helper]<-NA
train1$Helper <- round((train1$SibSp+train1$Parch)/(train1$SibSp+train1$Parch+.01), 0)
test1$Helper <- round((test1$SibSp+test1$Parch)/(test1$SibSp+test1$Parch+.01), 0)
## looks at Helper
require(ggplot2)
p<-ggplot(train1, aes(factor(Pclass), Age)) + geom_boxplot()
p<-p+facet_grid(.~Helper)
p<-p+ggtitle("Age and Passenger Class / Helper")
p
require(ggplot2)
p<-ggplot(train1, aes(factor(Pclass), factor(Survived))) + geom_boxplot()
p<-p+facet_grid(.~Helper)
p<-p+ggtitle("Age and Passenger Class / Helper")
p
require(ggplot2)
p<-ggplot(train1, aes(factor(Survived), Age)) + geom_boxplot()
p<-p+facet_grid(.~Helper)
p<-p+ggtitle("Age and Passenger Class / Helper")
p
p<-ggplot(train1, aes(factor(Survived), Sex)) + geom_boxplot()
p<-p+facet_grid(.~Helper)
p<-p+ggtitle("Age and Passenger Class / Helper")
p
require(ggplot2)
p<-ggplot(train1, aes(factor(Helper), Age)) + geom_boxplot()
p<-p+facet_grid(.~Sex)
p<-p+ggtitle("Age and Passenger Class / Helper")
p
p<-ggplot(train1, aes(factor(Helper), Age)) + geom_boxplot()
p<-p+facet_grid(Survived~Sex)
p<-p+ggtitle("Age and Passenger Class / Helper")
p
control1 <- trainControl(method = "cv")
## the model function
modelfunction <- Survived~Age+Pclass+Helper*Sex
## model using random forest
model1 <- train(modelfunction, data = train1, method="rf", trControl = control1, prox=FALSE)
prediction1 <- predict(model1, test1)
hist(prediction1)
prediction1[prediction1<0.5]<-0
prediction1[prediction1>=0.5]<-1
prediction1<-as.factor(prediction1)
conf3<-confusionMatrix(test1$Survived, prediction1)
conf3$table
round(100*conf3$overall[1],2)
round(100*conf2$overall[1],2)
model1 <- train(modelfunction, data = train1, method="lda", trControl = control1, prox=FALSE)
require(MASS)
## model using random forest
model1 <- train(modelfunction, data = train1, method="lda", trControl = control1, prox=FALSE)
modelfunction <- Survived~Age+Pclass+Helper+Sex
head(train1)
head(train1, 20)
table(train1$Helper, train1$Survived)
train1[train1$Age>20, "Helper"] <- 0
test1[train1$Age>20, "Helper"] <- 0
train1["Age">20, "Helper"] <- 0
head(train1)
head(train1, 30)
training<-trainingRaw
testing<-testingRaw
require(caret)
set.seed(8675309)
xx <- createDataPartition(y=training$Survived, p=0.70, list=FALSE)
##Define training and test sets
train1<-training[xx,]
test1<-training[-xx,]
## to create model first get rid of NA rows in Age
trainfull<-train1[is.na(train1$Age)==FALSE, ]
testfull<-test1[is.na(train1$Age)==FALSE, ]
## fit model dependent on Pclass and Sex
agemodel<-glm(Age~Pclass+Sex, data=trainfull)
```
ageTestPredict<-predict(agemodel, test1)
test1$AgeModel<-ageTestPredict
ageTrainPredict<-predict(agemodel, train1)
train1$AgeModel<-ageTrainPredict
## Fill in NA's with Model values
train1[is.na(train1$Age)==TRUE,"Age"]<-train1[is.na(train1$Age)==TRUE,"AgeModel"]
test1[is.na(test1$Age)==TRUE,"Age"]<-test1[is.na(test1$Age)==TRUE,"AgeModel"]
train1$Helper <- round((train1$SibSp+train1$Parch)/(train1$SibSp+train1$Parch+.01), 0)
test1$Helper <- round((test1$SibSp+test1$Parch)/(test1$SibSp+test1$Parch+.01), 0)
require(ggplot2)
p<-ggplot(train1, aes(factor(Survived), Age)) + geom_violin()
p<-p+facet_grid(Helper~.)
p<-p+ggtitle("Age and Passenger Class / Helper")
p
train1["Age">20, "Helper"] <- 0
test1["Age">20, "Helper"] <- 0
## looks at Helper
require(ggplot2)
p<-ggplot(train1, aes(factor(Survived), Age)) + geom_violin()
p<-p+facet_grid(Helper~.)
p<-p+ggtitle("Age and Passenger Class / Helper")
p
train1<-training[xx,]
test1<-training[-xx,]
trainfull<-train1[is.na(train1$Age)==FALSE, ]
testfull<-test1[is.na(train1$Age)==FALSE, ]
## fit model dependent on Pclass and Sex
agemodel<-glm(Age~Pclass+Sex, data=trainfull)
ageTestPredict<-predict(agemodel, test1)
test1$AgeModel<-ageTestPredict
ageTrainPredict<-predict(agemodel, train1)
train1$AgeModel<-ageTrainPredict
train1[is.na(train1$Age)==TRUE,"Age"]<-train1[is.na(train1$Age)==TRUE,"AgeModel"]
test1[is.na(test1$Age)==TRUE,"Age"]<-test1[is.na(test1$Age)==TRUE,"AgeModel"]
train1$Helper <- round((train1$SibSp+train1$Parch)/(train1$SibSp+train1$Parch+.01), 0)
test1$Helper <- round((test1$SibSp+test1$Parch)/(test1$SibSp+test1$Parch+.01), 0)
p<-ggplot(train1, aes(factor(Helper), Age)) + geom_violin()
p<-p+facet_grid(Survived~.)
p<-p+ggtitle("Age and Passenger Class / Helper")
p
train1$Helper[train$Age>20] <- 0
train1$Helper[train1$Age>20] <- 0
test1$Helper[train1$Age>20] <- 0
test1$Helper[test1$Age>20] <- 0
p<-ggplot(train1, aes(factor(Survived), Age)) + geom_violin()
p<-p+facet_grid(Helper~.)
p<-p+ggtitle("Age and Passenger Class / Helper")
p
train1$Helper[train1$Age>15] <- 0
test1$Helper[test1$Age>15] <- 0
p<-ggplot(train1, aes(factor(Survived), Age)) + geom_violin()
p<-p+facet_grid(Helper~.)
p<-p+ggtitle("Age and Passenger Class / Helper")
p
control1 <- trainControl(method = "cv")
## the model function
modelfunction <- Survived~Age+Pclass+Helper+Sex
require(MASS)
model1 <- train(modelfunction, data = train1, method="rf", trControl = control1, prox=FALSE)
prediction3 <- predict(model1, test1)
hist(prediction3)
prediction3[prediction3<0.5]<-0
prediction3[prediction3>=0.5]<-1
prediction3<-as.factor(prediction3)
conf3<-confusionMatrix(test1$Survived, prediction3)
conf3$table
round(100*conf3$overall[1],2)
prediction3 <- predict(model1, test1)
hist(prediction3)
prediction3[prediction3<0.7]<-0
prediction3[prediction3>=0.7]<-1
prediction3<-as.factor(prediction3)
conf3<-confusionMatrix(test1$Survived, prediction3)
conf3
plot(prediction3, test1$Survived)
prediction3 <- predict(model1, test1)
hist(prediction3)
plot(prediction3, test1$Survived)
prediction1[prediction1>=0.65]<-1
p<-ggplot(test1x, aes(prediction3, survived, color=factor(Sex))) + geom_point()
p<-ggplot(test1x, aes(prediction3, Survived, color=factor(Sex))) + geom_point()
```{r "look at data3", fig.align='center', echo=FALSE, warning=FALSE, message=FALSE}
## restore original data
training<-trainingRaw
testing<-testingRaw
require(caret)
set.seed(8675309)
xx <- createDataPartition(y=training$Survived, p=0.70, list=FALSE)
##Define training and test sets
train1<-training[xx,]
test1<-training[-xx,]
trainfull<-train1[is.na(train1$Age)==FALSE, ]
testfull<-test1[is.na(train1$Age)==FALSE, ]
## fit model dependent on Pclass and Sex
agemodel<-glm(Age~Pclass+Sex, data=trainfull)
```
It slightly improves the RMSE of a fit is `r round(rmseModel,1)` versus of using the mean `r round(rmseMean, 1)`. An improvement. So I'l use that to fill in blanks.
Another way to look at this data is by buckets
```{r "clean data with Model4", echo=FALSE}
## First make an extra column of predicted values
ageTestPredict<-predict(agemodel, test1)
test1$AgeModel<-ageTestPredict
ageTrainPredict<-predict(agemodel, train1)
train1$AgeModel<-ageTrainPredict
## Fill in NA's with Model values
train1[is.na(train1$Age)==TRUE,"Age"]<-train1[is.na(train1$Age)==TRUE,"AgeModel"]
test1[is.na(test1$Age)==TRUE,"Age"]<-test1[is.na(test1$Age)==TRUE,"AgeModel"]
train1$OldFarts<-0
train1$OldFarts[train1$Sex=="male"&train1$Age>60] <- 1
control1 <- trainControl(method = "cv")
## the model function
modelfunction <- Survived~Age+Pclass+OldFarts+Sex
require(MASS)
## model using random forest
model1 <- train(modelfunction, data = train1, method="rf", trControl = control1, prox=FALSE)
prediction3 <- predict(model1, test1)
hist(prediction3)
## create diagnostic plot
test1x<-cbind(test1, prediction3)
p <- ggplot(test1x, aes(prediction3, Survived, color=Age)) + geom_point()
p <- p+facet_grid(.~Sex)
p <- p+ scale_color_gradient(low="red", high="darkgreen")
p <- p+ggtitle("Prediction vs Survival / Helper")
p
test1x<-cbind(test1, prediction3)
p <- ggplot(test1x, aes(prediction3, Survived, color=Age)) + geom_point()
p <- p+facet_grid(.~Sex)
p <- p+ scale_color_gradient(low="red", high="darkgreen")
p <- p+ggtitle("Prediction vs Survival / Helper")
p
test1X
head(test1x)
p
