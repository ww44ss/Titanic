agemodel.m<-glm(Age~Pclass+SibSp, data=trainfull.m)
head(trainfull.m)
head(train1.m)
train1.m<-train1["Sex"=="male",]
train1.m<-train1[train1$Sex=="male",]
train1.f<-train1[train1$Sex=="female",]
head(train1.m)
test1.f<-train1[test1$Sex=="female",]
test1.m<-train1[test1$Sex=="male",]
trainfull.m<-train1.m[is.na(train1.m$Age)==FALSE, ]
testfull.m<-test1.m[is.na(train1.m$Age)==FALSE, ]
trainfull.f<-train1.f[is.na(train1.f$Age)==FALSE, ]
testfull.f<-test1.f[is.na(train1.f$Age)==FALSE, ]
agemodel.m<-glm(Age~Pclass+SibSp, data=trainfull.m)
agemodel.f<-glm(Age~Pclass+SibSp, data=trainfull.f)
ageTestPredict.m<-predict(agemodel.m, test1.m)
ageTestPredict.f<-predict(agemodel.f, test1.f)
test1.m$AgeModel<-ageTestPredict.m
test1.f$AgeModel<-ageTestPredict.f
ageTrainPredict.m<-predict(agemodel.m, train1.m)
ageTrainPredict.f<-predict(agemodel.f, train1.f)
train1.m$AgeModel<-ageTrainPredict.m
train1.f$AgeModel<-ageTrainPredict.f
train1.m[is.na(train1.m$Age)==TRUE,"Age"]<-train1.m[is.na(train1.m$Age)==TRUE,"AgeModel"]
train1.f[is.na(train1.f$Age)==TRUE,"Age"]<-train1.f[is.na(train1.f$Age)==TRUE,"AgeModel"]
test1.m[is.na(test1.m$Age)==TRUE,"Age"]<-test1.m[is.na(test1.m$Age)==TRUE,"AgeModel"]
test1.f[is.na(test1.f$Age)==TRUE,"Age"]<-test1.f[is.na(test1.f$Age)==TRUE,"AgeModel"]
require(ggplot2)
p <- ggplot(train1.m, aes(Age, AgeModel, color=Sex)) + geom_point()
p <- p+ facet_grid(.~Survived)
p <- p+ ggtitle("Age versus AgeModel / Survived")
p
p <- ggplot(train1.f, aes(Age, AgeModel, color=Sex)) + geom_point()
p <- p+ facet_grid(.~Survived)
p <- p+ ggtitle("Age versus AgeModel / Survived")
p
control1 <- trainControl(method = "cv")
## the model function
modelfunction <- Survived~AgeModel+Pclass+Sex
require(MASS)
## model using random forest
model1.m <- train(modelfunction, data = train1.m, method="rf", trControl = control1, prox=FALSE)
model1.f <- train(modelfunction, data = train1.f, method="rf", trControl = control1, prox=FALSE)
prediction3.f <- predict(model1.f, test1.f)
prediction3.m <- predict(model1.m, test1.m)
hist(prediction3.f)
hist(prediction3.m)
## create diagnostic plot
test1x.m<-cbind(test1.m, prediction3.m)
p <- ggplot(test1x.m, aes(prediction3.m, Survived, color=Age)) + geom_point()
p <- p+facet_grid(.~Sex)
p <- p+ scale_color_gradient(low="red", high="darkgreen")
p <- p+ggtitle("Prediction vs Survival / Helper")
p
prediction3.m[prediction3.m<0.8]<-0
prediction3.m[prediction3.m>=0.8]<-1
prediction3.m<-as.factor(prediction3.m)
prediction3.f[prediction3.f<0.8]<-0
prediction3.f[prediction3.f>=0.8]<-1
prediction3.f<-as.factor(prediction3.f)
conf3.m<-confusionMatrix(test1.m$Survived, prediction3.m)
dim(test1.m)
dim(prediction3.m)
prediction3.m <- predict(model1.m, test1.m)
dim(prediction3.m)
model1.m <- train(modelfunction, data = train1.m, method="rf", trControl = control1, prox=FALSE)
model1.f <- train(modelfunction, data = train1.f, method="rf", trControl = control1, prox=FALSE)
prediction3.f <- predict(model1.f, test1.f)
prediction3.m <- predict(model1.m, test1.m)
hist(prediction3.f)
hist(prediction3.m)
test1x.m<-cbind(test1.m, prediction3.m)
p <- ggplot(test1x.m, aes(prediction3.m, Survived, color=Age)) + geom_point()
p <- p+facet_grid(.~Sex)
p <- p+ scale_color_gradient(low="red", high="darkgreen")
p <- p+ggtitle("Prediction vs Survival / Helper")
p
table(test1.m$Sex)
training<-trainingRaw
testing<-testingRaw
require(caret)
set.seed(8675309)
xx <- createDataPartition(y=training$Survived, p=0.70, list=FALSE)
##Define training and test sets
train1<-training[xx,]
test1<-training[-xx,]
train1.m<-train1[train1$Sex=="male",]
train1.f<-train1[train1$Sex=="female",]
test1.m<-train1[test1$Sex=="male",]
test1.f<-train1[test1$Sex=="female",]
table(test1.m$Sex)
trainfull.m<-train1.m[is.na(train1.m$Age)==FALSE, ]
testfull.m<-test1.m[is.na(train1.m$Age)==FALSE, ]
trainfull.f<-train1.f[is.na(train1.f$Age)==FALSE, ]
testfull.f<-test1.f[is.na(train1.f$Age)==FALSE, ]
## fit model dependent on Pclass and Sex
agemodel.m<-glm(Age~Pclass+SibSp, data=trainfull.m)
agemodel.f<-glm(Age~Pclass+SibSp, data=trainfull.f)
```
## First make an extra column of predicted values
ageTestPredict.m<-predict(agemodel.m, test1.m)
ageTestPredict.f<-predict(agemodel.f, test1.f)
test1.m$AgeModel<-ageTestPredict.m
test1.f$AgeModel<-ageTestPredict.f
ageTrainPredict.m<-predict(agemodel.m, train1.m)
ageTrainPredict.f<-predict(agemodel.f, train1.f)
train1.m$AgeModel<-ageTrainPredict.m
train1.f$AgeModel<-ageTrainPredict.f
trable(test1.m$Sex)
table(test1.m$Sex)
test1.m<-test1[test1$Sex=="male",]
test1.f<-test1[test1$Sex=="female",]
table(test1.m$Sex)
trainfull.m<-train1.m[is.na(train1.m$Age)==FALSE, ]
testfull.m<-test1.m[is.na(train1.m$Age)==FALSE, ]
trainfull.f<-train1.f[is.na(train1.f$Age)==FALSE, ]
testfull.f<-test1.f[is.na(train1.f$Age)==FALSE, ]
## fit model dependent on Pclass and Sex
agemodel.m<-glm(Age~Pclass+SibSp, data=trainfull.m)
agemodel.f<-glm(Age~Pclass+SibSp, data=trainfull.f)
```
```{r "clean data with Model3", echo=FALSE}
## First make an extra column of predicted values
ageTestPredict.m<-predict(agemodel.m, test1.m)
ageTestPredict.f<-predict(agemodel.f, test1.f)
test1.m$AgeModel<-ageTestPredict.m
test1.f$AgeModel<-ageTestPredict.f
ageTrainPredict.m<-predict(agemodel.m, train1.m)
ageTrainPredict.f<-predict(agemodel.f, train1.f)
train1.m$AgeModel<-ageTrainPredict.m
train1.f$AgeModel<-ageTrainPredict.f
## Fill in NA's with Model values
train1.m[is.na(train1.m$Age)==TRUE,"Age"]<-train1.m[is.na(train1.m$Age)==TRUE,"AgeModel"]
train1.f[is.na(train1.f$Age)==TRUE,"Age"]<-train1.f[is.na(train1.f$Age)==TRUE,"AgeModel"]
test1.m[is.na(test1.m$Age)==TRUE,"Age"]<-test1.m[is.na(test1.m$Age)==TRUE,"AgeModel"]
test1.f[is.na(test1.f$Age)==TRUE,"Age"]<-test1.f[is.na(test1.f$Age)==TRUE,"AgeModel"]
## plot the results
require(ggplot2)
p <- ggplot(train1.m, aes(Age, AgeModel, color=Pclass)) + geom_point()
p <- p+ facet_grid(.~Survived)
p <- p+ ggtitle("Age versus AgeModel / Survived")
p
p <- ggplot(train1.m, aes(Age, AgeModel, color=factor(Pclass))) + geom_point()
p <- p+ facet_grid(.~Survived)
p <- p+ ggtitle("Age versus AgeModel / Survived")
p
p <- ggplot(train1.f, aes(Age, AgeModel, color=Pclass)) + geom_point()
p <- p+ facet_grid(.~Survived)
p <- p+ ggtitle("Age versus AgeModel / Survived")
p
p <- ggplot(train1.f, aes(Age, AgeModel, color=factor(Pclass))) + geom_point()
p <- p+ facet_grid(.~Survived)
p <- p+ ggtitle("Age versus AgeModel / Survived")
p
p <- ggplot(train1.m, aes(Age, AgeModel, color=factor(Pclass))) + geom_point()
p <- p+ facet_grid(.~Survived)
p <- p+ ggtitle("MALE Age versus AgeModel / Survived")
p<-p + geom_smooth()
p
p <- ggplot(train1.m, aes(Age, AgeModel, color=factor(Pclass))) + geom_point()
p <- p+ facet_grid(.~Survived)
p <- p+ ggtitle("MALE Age versus AgeModel / Survived")
p<-p + geom_lm()
p
p <- ggplot(train1.m, aes(Age, AgeModel, color=factor(Pclass))) + geom_point()
p <- p+ facet_grid(.~Survived)
p <- p+ ggtitle("MALE Age versus AgeModel / Survived")
p<-p + stat_smooth()
p
p <- ggplot(train1.m, aes(Age, AgeModel, color=factor(Pclass))) + geom_point()
p <- p+ facet_grid(.~Survived)
p <- p+ ggtitle("MALE Age versus AgeModel / Survived")
p<-p + stat_smooth(method="lm")
p
training<-trainingRaw
testing<-testingRaw
require(caret)
set.seed(8675309)
xx <- createDataPartition(y=training$Survived, p=0.70, list=FALSE)
##Define training and test sets
train1<-training[xx,]
test1<-training[-xx,]
train1.m<-train1[train1$Sex=="male",]
train1.f<-train1[train1$Sex=="female",]
test1.m<-test1[test1$Sex=="male",]
test1.f<-test1[test1$Sex=="female",]
trainfull.m<-train1.m[is.na(train1.m$Age)==FALSE, ]
testfull.m<-test1.m[is.na(train1.m$Age)==FALSE, ]
trainfull.f<-train1.f[is.na(train1.f$Age)==FALSE, ]
testfull.f<-test1.f[is.na(train1.f$Age)==FALSE, ]
## fit model dependent on Pclass and Sex
agemodel.m<-glm(Age~Pclass+SibSp, data=trainfull.m)
agemodel.f<-glm(Age~Pclass+SibSp, data=trainfull.f)
```
```{r "clean data with Model3", echo=FALSE}
## First make an extra column of predicted values
ageTestPredict.m<-predict(agemodel.m, test1.m)
ageTestPredict.f<-predict(agemodel.f, test1.f)
test1.m$AgeModel<-ageTestPredict.m
test1.f$AgeModel<-ageTestPredict.f
ageTrainPredict.m<-predict(agemodel.m, train1.m)
ageTrainPredict.f<-predict(agemodel.f, train1.f)
train1.m$AgeModel<-ageTrainPredict.m
train1.f$AgeModel<-ageTrainPredict.f
train1.m[is.na(train1.m$Age)==TRUE,"Age"]<-train1.m[is.na(train1.m$Age)==TRUE,"AgeModel"]
train1.f[is.na(train1.f$Age)==TRUE,"Age"]<-train1.f[is.na(train1.f$Age)==TRUE,"AgeModel"]
test1.m[is.na(test1.m$Age)==TRUE,"Age"]<-test1.m[is.na(test1.m$Age)==TRUE,"AgeModel"]
test1.f[is.na(test1.f$Age)==TRUE,"Age"]<-test1.f[is.na(test1.f$Age)==TRUE,"AgeModel"]
## plot the results
require(ggplot2)
p <- ggplot(train1.m, aes(Age, AgeModel, color=factor(Pclass))) + geom_point()
p <- p+ facet_grid(.~Survived)
p <- p+ ggtitle("MALE Age versus AgeModel / Survived")
p<-p + stat_smooth(method="lm")
p
p <- ggplot(train1.f, aes(Age, AgeModel, color=factor(Pclass))) + geom_point()
p <- p+ facet_grid(.~Survived)
p <- p+ ggtitle("FEMALE Age versus AgeModel / Survived")
p
control1 <- trainControl(method = "cv")
## the model function
modelfunction <- Survived~AgeModel+Pclass+Sex
require(MASS)
## model using random forest
model1.m <- train(modelfunction, data = train1.m, method="rf", trControl = control1, prox=FALSE)
model1.f <- train(modelfunction, data = train1.f, method="rf", trControl = control1, prox=FALSE)
prediction3.f <- predict(model1.f, test1.f)
prediction3.m <- predict(model1.m, test1.m)
hist(prediction3.f)
hist(prediction3.m)
test1x.m<-cbind(test1.m, prediction3.m)
p <- ggplot(test1x.m, aes(prediction3.m, Survived, color=Age)) + geom_point()
p <- p+facet_grid(.~Pclass)
p <- p+ scale_color_gradient(low="red", high="darkgreen")
p <- p+ggtitle("Male: Prediction vs Survival")
p
test1x.f<-cbind(test1.f, prediction3.f)
p <- ggplot(test1x.f, aes(prediction3.m, Survived, color=Age)) + geom_point()
p <- p+facet_grid(.~Pclass)
p <- p+ scale_color_gradient(low="red", high="darkgreen")
p <- p+ggtitle("Male: Prediction vs Survival")
p
test1x.f<-cbind(test1.f, prediction3.f)
p <- ggplot(test1x.f, aes(prediction3.f, Survived, color=Age)) + geom_point()
p <- p+facet_grid(.~Pclass)
p <- p+ scale_color_gradient(low="red", high="darkgreen")
p <- p+ggtitle("Male: Prediction vs Survival")
p
prediction3.m[prediction3.m<0.8]<-0
prediction3.m[prediction3.m>=0.8]<-1
prediction3.m<-as.factor(prediction3.m)
prediction3.f[prediction3.f<0.8]<-0
prediction3.f[prediction3.f>=0.8]<-1
prediction3.f<-as.factor(prediction3.f)
dim(test1.m)
dim(prediction3.m)
prediction3.f <- predict(model1.f, test1.f)
prediction3.m <- predict(model1.m, test1.m)
dim(prediction3.m)
dim(prediction3.m)
str(model1.m)
str(test1.m)
hist(prediction3.m)
prediction3.m
length(prediction3.m)
prediction3.m[prediction3.m<0.8]<-0
prediction3.m[prediction3.m>=0.8]<-1
prediction3.m<-as.factor(prediction3.m)
length(test1.m$Survived)
test1.m$Survived
prediction3.m
prediction3.f <- predict(model1.f, test1.f)
prediction3.m <- predict(model1.m, test1.m)
hist(prediction3.f)
hist(prediction3.m)
test1x.m<-cbind(test1.m, prediction3.m)
p <- ggplot(test1x.m, aes(prediction3.m, Survived, color=Age)) + geom_point()
p <- p+facet_grid(.~Pclass)
p <- p+ scale_color_gradient(low="red", high="darkgreen")
p <- p+ggtitle("Male: Prediction vs Survival")
p
test1x.f<-cbind(test1.f, prediction3.f)
p <- ggplot(test1x.f, aes(prediction3.f, Survived, color=Age)) + geom_point()
p <- p+facet_grid(.~Pclass)
p <- p+ scale_color_gradient(low="red", high="darkgreen")
p <- p+ggtitle("Feale: Prediction vs Survival")
p
prediction3.m[prediction3.m<0.4]<-0
prediction3.m[prediction3.m>=0.4]<-1
#prediction3.m<-as.factor(prediction3.m)
prediction3.f[prediction3.f<0.8]<-0
prediction3.f[prediction3.f>=0.8]<-1
#prediction3.f<-as.factor(prediction3.f)
conf3.m<-confusionMatrix(test1.m$Survived, prediction3.m)
conf3.f<-confusionMatrix(test1.f$Survived, prediction3.f)
conf3.m$table
#conf3.f$table
conf3.f$table
## a key observation is that replacing age is a key swing point.
## survival <- age <- lots of blanks <- pay more attention here
## restore original data
training<-trainingRaw
testing<-testingRaw
require(caret)
set.seed(8675309)
xx <- createDataPartition(y=training$Survived, p=0.70, list=FALSE)
##Define training and test sets
train1<-training[xx,]
test1<-training[-xx,]
train1.m<-train1[train1$Sex=="male",]
train1.f<-train1[train1$Sex=="female",]
test1.m<-test1[test1$Sex=="male",]
test1.f<-test1[test1$Sex=="female",]
## to create model first get rid of NA rows in Age
trainfull.m<-train1.m[is.na(train1.m$Age)==FALSE, ]
testfull.m<-test1.m[is.na(train1.m$Age)==FALSE, ]
trainfull.f<-train1.f[is.na(train1.f$Age)==FALSE, ]
testfull.f<-test1.f[is.na(train1.f$Age)==FALSE, ]
## fit model dependent on Pclass and Sex
agemodel.m<-glm(Age~Pclass, data=trainfull.m)
agemodel.f<-glm(Age~Pclass, data=trainfull.f)
## First make an extra column of predicted values
ageTestPredict.m<-predict(agemodel.m, test1.m)
ageTestPredict.f<-predict(agemodel.f, test1.f)
test1.m$AgeModel<-ageTestPredict.m
test1.f$AgeModel<-ageTestPredict.f
ageTrainPredict.m<-predict(agemodel.m, train1.m)
ageTrainPredict.f<-predict(agemodel.f, train1.f)
train1.m$AgeModel<-ageTrainPredict.m
train1.f$AgeModel<-ageTrainPredict.f
## Fill in NA's with Model values
train1.m[is.na(train1.m$Age)==TRUE,"Age"]<-train1.m[is.na(train1.m$Age)==TRUE,"AgeModel"]
train1.f[is.na(train1.f$Age)==TRUE,"Age"]<-train1.f[is.na(train1.f$Age)==TRUE,"AgeModel"]
test1.m[is.na(test1.m$Age)==TRUE,"Age"]<-test1.m[is.na(test1.m$Age)==TRUE,"AgeModel"]
test1.f[is.na(test1.f$Age)==TRUE,"Age"]<-test1.f[is.na(test1.f$Age)==TRUE,"AgeModel"]
## plot the results
require(ggplot2)
p <- ggplot(train1.m, aes(Age, AgeModel, color=factor(Pclass))) + geom_point()
p <- p+ facet_grid(.~Survived)
p <- p+ ggtitle("MALE Age versus AgeModel / Survived")
p
p <- ggplot(train1.f, aes(Age, AgeModel, color=factor(Pclass))) + geom_point()
p <- p+ facet_grid(.~Survived)
p <- p+ ggtitle("FEMALE Age versus AgeModel / Survived")
p
## First make an extra column of predicted values
ageTestPredict.m<-predict(agemodel.m, test1.m)
ageTestPredict.f<-predict(agemodel.f, test1.f)
test1.m$AgeModel<-ageTestPredict.m
test1.f$AgeModel<-ageTestPredict.f
ageTrainPredict.m<-predict(agemodel.m, train1.m)
ageTrainPredict.f<-predict(agemodel.f, train1.f)
train1.m$AgeModel<-ageTrainPredict.m
train1.f$AgeModel<-ageTrainPredict.f
## Fill in NA's with Model values
train1.m[is.na(train1.m$Age)==TRUE,"Age"]<-train1.m[is.na(train1.m$Age)==TRUE,"AgeModel"]
train1.f[is.na(train1.f$Age)==TRUE,"Age"]<-train1.f[is.na(train1.f$Age)==TRUE,"AgeModel"]
test1.m[is.na(test1.m$Age)==TRUE,"Age"]<-test1.m[is.na(test1.m$Age)==TRUE,"AgeModel"]
test1.f[is.na(test1.f$Age)==TRUE,"Age"]<-test1.f[is.na(test1.f$Age)==TRUE,"AgeModel"]
## plot the results
require(ggplot2)
p <- ggplot(train1.m, aes(Age, AgeModel, color=factor(Pclass))) + geom_point()
p <- p+ facet_grid(.~Survived)
p <- p+ ggtitle("MALE Age versus AgeModel / Survived")
p
p <- ggplot(train1.f, aes(Age, AgeModel, color=factor(Pclass))) + geom_point()
p <- p+ facet_grid(.~Survived)
p <- p+ ggtitle("FEMALE Age versus AgeModel / Survived")
p
control1 <- trainControl(method = "cv")
## the model function
modelfunction <- Survived~AgeModel+Pclass+Sex
require(MASS)
## model using random forest
model1.m <- train(modelfunction, data = train1.m, method="rf", trControl = control1, prox=FALSE)
model1.f <- train(modelfunction, data = train1.f, method="rf", trControl = control1, prox=FALSE)
prediction3.f <- predict(model1.f, test1.f)
prediction3.m <- predict(model1.m, test1.m)
hist(prediction3.f)
hist(prediction3.m)
## create diagnostic plot
test1x.m<-cbind(test1.m, prediction3.m)
p <- ggplot(test1x.m, aes(prediction3.m, Survived, color=Age)) + geom_point()
p <- p+facet_grid(.~Pclass)
p <- p+ scale_color_gradient(low="red", high="darkgreen")
p <- p+ggtitle("Male: Prediction vs Survival")
p
test1x.f<-cbind(test1.f, prediction3.f)
p <- ggplot(test1x.f, aes(prediction3.f, Survived, color=Age)) + geom_point()
p <- p+facet_grid(.~Pclass)
p <- p+ scale_color_gradient(low="red", high="darkgreen")
p <- p+ggtitle("Feale: Prediction vs Survival")
p
prediction3.m[prediction3.m<0.75]<-0
prediction3.m[prediction3.m>=0.75]<-1
#prediction3.m<-as.factor(prediction3.m)
prediction3.f[prediction3.f<0.75]<-0
prediction3.f[prediction3.f>=0.75]<-1
#prediction3.f<-as.factor(prediction3.f)
conf3.m<-confusionMatrix(test1.m$Survived, prediction3.m)
conf3.f<-confusionMatrix(test1.f$Survived, prediction3.f)
test1.m$Survived
prediction3.m
control1 <- trainControl(method = "cv")
## the model function
modelfunction <- Survived~AgeModel+Pclass+Sex
require(MASS)
## model using random forest
model1.m <- train(modelfunction, data = train1.m, method="rf", trControl = control1, prox=FALSE)
model1.f <- train(modelfunction, data = train1.f, method="rf", trControl = control1, prox=FALSE)
prediction3.f <- predict(model1.f, test1.f)
prediction3.m <- predict(model1.m, test1.m)
hist(prediction3.f)
hist(prediction3.m)
## create diagnostic plot
test1x.m<-cbind(test1.m, prediction3.m)
p <- ggplot(test1x.m, aes(prediction3.m, Survived, color=Age)) + geom_point()
p <- p+facet_grid(.~Pclass)
p <- p+ scale_color_gradient(low="red", high="darkgreen")
p <- p+ggtitle("Male: Prediction vs Survival")
p
test1x.f<-cbind(test1.f, prediction3.f)
p <- ggplot(test1x.f, aes(prediction3.f, Survived, color=Age)) + geom_point()
p <- p+facet_grid(.~Pclass)
p <- p+ scale_color_gradient(low="red", high="darkgreen")
p <- p+ggtitle("Feale: Prediction vs Survival")
p
prediction3.m[prediction3.m<0.35]<-0
prediction3.m[prediction3.m>=0.35]<-1
#prediction3.m<-as.factor(prediction3.m)
prediction3.f[prediction3.f<0.75]<-0
prediction3.f[prediction3.f>=0.75]<-1
#prediction3.f<-as.factor(prediction3.f)
conf3.m<-confusionMatrix(test1.m$Survived, prediction3.m)
conf3.f<-confusionMatrix(test1.f$Survived, prediction3.f)
conf3.m$table
conf3.f$table
The accuracy is `r round(100*conf3.m$overall[1],2)` for males and `r round(100*conf3.f$overall[1],2)`for females compares to the earlier `r round(100*conf2$overall[1],2)`%.
agemodel.m<-glm(Age~Pclass+Sex+Fare, data=trainfull.m)
agemodel.f<-glm(Age~Pclass+Sex, data=trainfull.f)
?log10
head(train1)
?write.csv
setwd("/Users/winstonsaunders/Documents/TitanicKaggle")
## get data sets
training <- read.csv("train.csv", na.strings=c("NA", ""))
testing <- read.csv("test.csv", na.strings=c("NA", ""))
trainingRaw<-training
testingRaw<-testing
```
##Model TWO
Base first model on Sex and Age per tutorial. Since there are many NA's in the data we replace those with the mean ages for male or females.
The model is trained with a _Random Forest_.
```{r "clean data1", echo=FALSE}
## Clean the data
## calculate the median age for the population, men and women
meanAge<-mean(training$Age[is.na(training$Age)==FALSE])
meanMaleAge<-mean(training$Age[training$Sex=="male"&is.na(training$Age)==FALSE])
meanFemaleAge<-mean(training$Age[training$Sex=="female"&is.na(training$Age)==FALSE])
## substitute median ages based on sex
training$Age[is.na(training$Age)&training$Sex=="male"]<-meanMaleAge
training$Age[is.na(training$Age)&training$Sex=="female"]<-meanFemaleAge
testing$Age[is.na(testing$Age)&testing$Sex=="male"]<-meanMaleAge
testing$Age[is.na(testing$Age)&testing$Sex=="female"]<-meanFemaleAge
```
The mean male age is `r round(meanMaleAge, 1)` years and the mean female age is `r round(meanFemaleAge,1)` years. Here is a snapshot of the cleaned data.  Note the fractional year on substituted values.
```{r}
training[1:6,c("Survived", "Age", "Sex")]
```
The first model looks at the following function
```{r "First model", warning=FALSE, echo=33, message=FALSE}
## This is a first simple model
## create data sub partition
require(caret)
set.seed(8675309)
xx <- createDataPartition(y=training$Survived, p=0.80, list=FALSE)
##Define training and test sets
train1<-training[xx,]
test1<-training[-xx,]
#train1 <- train1[,c("Survived","Sex", "Age")]
#test1 <-   test1[,c("Survived","Sex", "Age")]
## simplify Age column by bucketing
## group in multiples of 5*n+1 (1, 6, 11, ...)
## train1$Age2 <- 16*round(train1$Age/16,0)
## test1$Age2 <- 16*round(test1$Age/16,0)
## set up training control
control1 <- trainControl(method = "cv")
## model using random forest
modelfunction<-Survived~Age+Sex
model1 <- train(modelfunction, data = train1, method="rf", trControl = control1, prox=FALSE)
prediction1 <- predict(model1, test1)
prediction1[prediction1<0.75]<-0
prediction1[prediction1>=0.75]<-1
prediction1<-as.factor(prediction1)
t<-table(prediction1, test1$Survived)
conf<-confusionMatrix(test1$Survived, prediction1)
predictionT <- predict(model1, testing)
head(predictionT)
length(predictionT)
predictionT[predictionT<0.75]<-0
predictionT[predictionT>=0.75]<-1
Survived<-as.factor(predictionT)
Output<-cbind(testing$PassengerId, Survived)
write.csv(Output, "Model1.csv")
head(Output)
?write.csv
write.csv(Output, "Model1.csv", row.names=FALSE)
PassengerId<-testing$PassengerId
## Write output file
Output<-cbind(PassengerId, Survived)
write.csv(Output, "Model1.csv", row.names=FALSE)
xx <- createDataPartition(y=training$Survived, p=0.90, list=FALSE)
