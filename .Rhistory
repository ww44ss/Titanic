train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
str(trainSA)
SAmodel<-glm(chd~alcohol+obesity+tobacco+typea+ldl, family="binomial", data=trainSA)
summary(SAModel)
summary(SAmodel)
SApredict<-predict(SAmodel, testSA)
confusionMatrix(testSA$chd, SApredict)
library(caret)
confusionMatrix(testSA$chd, SApredict)
SApredict
testSA$chd
missClass(testSA$chd, SApredict)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(testSA$chd, SApredict)
SAtestpredict<-predict(SAmodel, testSA)
SAtestpredict<-predict(SAmodel, testSA)
SAtrainpredict<-predict(SAmodel, trainSA)
SAtestpredict<-predict(SAmodel, testSA)
SAtrainpredict<-predict(SAmodel, trainSA)
SAtestpredict
hist(as.vector(SAtestpredict))
SAmodel<-glm(chd~alcohol+obesity+tobacco+typea+ldl-1, family="binomial", data=trainSA)
summary(SAmodel)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
SAtestpredict<-predict(SAmodel, testSA)
SAtrainpredict<-predict(SAmodel, trainSA)
hist(as.vector(SAtestpredict))
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
str(trainSA)
str(trainSA)
SAmodel<-glm(chd~alcohol+obesity+tobacco+typea+ldl, family="binomial", data=trainSA)
summary(SAmodel)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
SAtestpredict<-predict(SAmodel, testSA)
SAtrainpredict<-predict(SAmodel, trainSA)
testSA$chd
hist(as.vector(SAtestpredict))
hist(as.vector(testSA$chd))
missClass(testSA$chd, SApredict)
missClass(testSA$chd, SAtestpredict)
missClass(trainSA$chd, SAtrainpredict)
hist(as.vector(testSA$chd), fill="lightblue")
hist(as.vector(testSA$chd), col="lightblue")
SAmodel<-glm(chd~alcohol+obesity+tobacco+typea+ldl-1, family="binomial", data=trainSA)
summary(SAmodel)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
SAtestpredict<-predict(SAmodel, testSA)
SAtrainpredict<-predict(SAmodel, trainSA)
testSA$chd
hist(as.vector(SAtestpredict))
hist(as.vector(testSA$chd), col="lightblue")
#library(caret)
#confusionMatrix(testSA$chd, SAtestpredict)
#confusionMatrix(trainSA$chd, SAtrainpredict)
missClass(testSA$chd, SAtestpredict)
missClass(trainSA$chd, SAtrainpredict)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
str(trainSA)
str(trainSA)
set.seed(13234)
SAmodel<-glm(chd~alcohol+obesity+tobacco+typea+ldl-1, family="binomial", data=trainSA)
summary(SAmodel)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
SAtestpredict<-predict(SAmodel, testSA)
SAtrainpredict<-predict(SAmodel, trainSA)
testSA$chd
hist(as.vector(SAtestpredict))
hist(as.vector(testSA$chd), col="lightblue")
#library(caret)
#confusionMatrix(testSA$chd, SAtestpredict)
#confusionMatrix(trainSA$chd, SAtrainpredict)
missClass(testSA$chd, SAtestpredict)
missClass(trainSA$chd, SAtrainpredict)
?glm
?train
SAmodelt<-train(formula, data=trainSA, method="glm", family="binomial")
SAheart$chd<-as.factor(SAheart$chd)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
str(trainSA)
str(trainSA)
set.seed(13234)
formula<-chd~alcohol+obesity+tobacco+typea+ldl
SAmodel<-glm(formula, family="binomial", data=trainSA)
SAmodelt<-train(formula, data=trainSA, method="glm")
summary(SAmodel)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
SAtestpredict<-predict(SAmodel, testSA)
SAtrainpredict<-predict(SAmodel, trainSA)
testSA$chd
hist(as.vector(SAtestpredict))
hist(as.vector(testSA$chd), col="lightblue")
hist(as.numeric(testSA$chd), col="lightblue")
hist(as.numeric(testSA$chd-1), col="lightblue")
hist(as.numeric(testSA$chd)-1, col="lightblue")
missClass(testSA$chd, SAtestpredict)
missClass(trainSA$chd, SAtrainpredict)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
str(vowel.train)
vowel.train$y<-as.factor(vowel.train$y)
vowel.test$y<-as.factor(vowel.test$y)
set.seed(33833)
require(caret)
model1 <- train(y~., data = vowel.train, method="rf")
varimp(model1)
?varimp
??varimp
varImp(model1)
?varIMP
varImp
?varImp
varImp(model1, scale=FALSE)
set.seed(33833)
model1 <- train(y~., data = vowel.train, method="rf")
varImp(model1, scale=FALSE)
model2 <- train(y~., data = vowel.train, method="rf")
varImp(model2)
model2 <- train(y~., data = vowel.test, method="rf")
varImp(model2)
varImp(model1, value="gcv")
varImp(model1, value="nsubsets")
varImp(model1, value="rss")
set.seed(33833)
varImp(model1, value="rss")
varImp(model2)
model1 <- train(y~., data = vowel.train, method="rf", importance=TRUE)
set.seed(33833)
model1 <- train(y~., data = vowel.train, method="rf", importance=TRUE)
varImp(model1)
varImp(model1, type=2)
library(ElemStatLearn)
library(caret)
data(vowel.train)
data(vowel.test)
vowel.train$y<-as.factor(vowel.train$y)
vowel.test$y<-as.factor(vowel.test$y)
set.seed(33833)
model1 <- train(y~., data = vowel.train, method="rf", importance=TRUE)
model2 <- train(y~., data = vowel.train, method="gbm", importance=TRUE)
model2 <- train(y~., data = vowel.train, method="gbm", importance=TRUE)
str(vowel.test)
predict1<-predict(model1, vowel.test)
predict2<-predict(model2, vowel.test)
library(ElemStatLearn)
library(caret)
data(vowel.train)
data(vowel.test)
vowel.train$y<-as.factor(vowel.train$y)
vowel.test$y<-as.factor(vowel.test$y)
set.seed(33833)
model1 <- train(y~., data = vowel.train, method="rf", importance=TRUE)
model2 <- train(y~., data = vowel.train, method="gbm", verbose=TRUE)
predict1<-predict(model1, vowel.test)
predict2<-predict(model2, vowel.test)
length(predict1)
length(predict2)
predict1(1:10)
predict1[1:10]
predict2[1:10]
agree<-predict1[predict1==predict2]
length(agree)
confusionMatrix(Test$y, predict1)
confusionMatrix(vowel.test$y, predict1)
confusionMatrix(vowel.test$y, predict2)
install.packages("Amelia")
## this section gets the data and loads it into training and testing data files
## get data sets from github repo
## use read data steps from the dude
library(RCurl)
readData <- function(path.name, file.name, column.types, missing.types) {
myData<-getURL(  paste0(path.name, file.name) )
read.csv(textConnection(myData),
colClasses=column.types,
na.strings=missing.types )
}
Titanic.path <- "https://raw.githubusercontent.com/ww44ss/Titanic/master/"
train.data.file <- "train.csv"
test.data.file <- "test.csv"
missing.types <- c("NA", "")
train.column.types <- c('integer',   # PassengerId
'factor',    # Survived
'factor',    # Pclass
'character', # Name
'factor',    # Sex
'numeric',   # Age
'integer',   # SibSp
'integer',   # Parch
'character', # Ticket
'numeric',   # Fare
'character', # Cabin
'factor'     # Embarked
)
test.column.types <- train.column.types[-2]     # # no Survived column in test.csv
##Okay let's get the data
training <- readData(Titanic.path, train.data.file, train.column.types, missing.types)
testing <-  readData(Titanic.path, test.data.file, test.column.types, missing.types)
trainingRaw<-training
testingRaw<-testing
## map missing data by provided feature
require(Amelia)
missmap(training, main="Titanic Training Data - Missings Map",
col=c("yellow", "black"), legend=FALSE)
missmap(training, main="Titanic Training Data - Missings Map",
col=c("yellow", "darkgrey"), legend=FALSE)
## map missing data by provided feature
require(Amelia)
missmap(training, main="Titanic Training Data - Missings Map",
col=c("red", "darkgreen"), legend=FALSE)
col=c("lightblue", "darkgreen"), legend=FALSE)
col=c("blue", "darkgreen"), legend=FALSE)
missmap(training, main="Titanic Training Data - Missings Map",
col=c("blue", "darkgreen"), legend=FALSE)
missmap(training, main="Titanic Training Data - Missings Map",
col=c("lightblue", "darkgreen"), legend=FALSE)
?missmap
missmap(training, main="Titanic Training Data - Missings Map",
col=c("wheat", "darkgreen"), legend=FALSE, y.cex=1)
missmap(training, main="Titanic Training Data - Missings Map",
col=c("wheat", "darkgoldenrod1"), legend=FALSE, x.cex=1)
missmap(training, main="Titanic Training Data - Missings Map",
col=c("wheat", "darkorange4"), legend=FALSE, x.cex=1)
missmap(training, main="Titanic Training Data - Missings Map",
col=c("wheat", "darkorange4"), legend=FALSE, y.cex=1.5)
missmap(training, main="Titanic Training Data - Missings Map",
col=c("wheat", "darkorange4"), legend=FALSE, y.cex=0.6)
## this section gets the data and loads it into training and testing data files
## get data sets from github repo
## use read data steps from the dude
library(RCurl)
readData <- function(path.name, file.name, column.types, missing.types) {
myData<-getURL(  paste0(path.name, file.name) )
read.csv(textConnection(myData),
colClasses=column.types,
na.strings=missing.types )
}
source('~/.active-rstudio-document', echo=TRUE)
## this section gets the data and loads it into training and testing data files
## get data sets from github repo
## use read data steps from the dude
library(RCurl)
readData <- function(path.name, file.name, column.types, missing.types) {
myData<-getURL(  paste0(path.name, file.name) )
read.csv(textConnection(myData),
colClasses=column.types,
na.strings=missing.types )
}
Titanic.path <- "https://raw.githubusercontent.com/ww44ss/Titanic/master/"
train.data.file <- "train.csv"
test.data.file <- "test.csv"
missing.types <- c("NA", "")
train.column.types <- c('integer',   # PassengerId
'factor',    # Survived
'factor',    # Pclass
'character', # Name
'factor',    # Sex
'numeric',   # Age
'integer',   # SibSp
'integer',   # Parch
'character', # Ticket
'numeric',   # Fare
'character', # Cabin
'factor'     # Embarked
)
test.column.types <- train.column.types[-2]     # # no Survived column in test.csv
##Okay let's get the data
training <- readData(Titanic.path, train.data.file, train.column.types, missing.types)
testing <-  readData(Titanic.path, test.data.file, test.column.types, missing.types)
trainingRaw<-training
testingRaw<-testing
## map missing data by provided feature
require(Amelia)
missmap(training, main="Titanic Training Data - Missings Map",
col=c("wheat", "darkorange4"), legend=FALSE, y.cex=1)
## Clean the data
## calculate the median age for the population, men and women
meanAge<-mean(training$Age[is.na(training$Age)==FALSE])
meanMaleAge<-mean(training$Age[training$Sex=="male"&is.na(training$Age)==FALSE])
meanFemaleAge<-mean(training$Age[training$Sex=="female"&is.na(training$Age)==FALSE])
## substitute median ages based on sex
training$Age[is.na(training$Age)&training$Sex=="male"]<-meanMaleAge
training$Age[is.na(training$Age)&training$Sex=="female"]<-meanFemaleAge
testing$Age[is.na(testing$Age)&testing$Sex=="male"]<-meanMaleAge
testing$Age[is.na(testing$Age)&testing$Sex=="female"]<-meanFemaleAge
training[1:6,c("Survived", "Age", "Sex")]
## This is a first simple model
## create data sub partition
require(caret)
set.seed(8675307)
xx <- createDataPartition(y=training$Survived, p=0.75, list=FALSE)
##Define training and test sets
train1<-training[xx,]
test1<-training[-xx,]
#train1 <- train1[,c("Survived","Sex", "Age")]
#test1 <-   test1[,c("Survived","Sex", "Age")]
## simplify Age column by bucketing
## group in multiples of 5*n+1 (1, 6, 11, ...)
## train1$Age2 <- 16*round(train1$Age/16,0)
## test1$Age2 <- 16*round(test1$Age/16,0)
## set up training control
control1 <- trainControl(method = "cv")
## model using random forest
modelfunction<-Survived~Age+Sex
model1 <- train(modelfunction, data = train1, method="rf", trControl = control1, prox=FALSE)
prediction1 <- predict(model1, test1)
## assign to zero or one.
prediction1[prediction1<0.75]<-0
prediction1[prediction1>=0.75]<-1
prediction1<-as.factor(prediction1)
t<-table(prediction1, test1$Survived)
conf<-confusionMatrix(test1$Survived, prediction1)
## This is a first simple model
## create data sub partition
require(caret)
set.seed(8675307)
xx <- createDataPartition(y=training$Survived, p=0.75, list=FALSE)
##Define training and test sets
train1<-training[xx,]
test1<-training[-xx,]
#train1 <- train1[,c("Survived","Sex", "Age")]
#test1 <-   test1[,c("Survived","Sex", "Age")]
## simplify Age column by bucketing
## group in multiples of 5*n+1 (1, 6, 11, ...)
## train1$Age2 <- 16*round(train1$Age/16,0)
## test1$Age2 <- 16*round(test1$Age/16,0)
## set up training control
control1 <- trainControl(method = "cv")
## model using random forest
modelfunction<-Survived~Age+Sex
model1 <- train(modelfunction, data = train1, method="rf", trControl = control1, prox=FALSE)
prediction1 <- predict(model1, test1)
## assign to zero or one.
#         prediction1[prediction1<0.75]<-0
#         prediction1[prediction1>=0.75]<-1
prediction1<-as.factor(prediction1)
t<-table(prediction1, test1$Survived)
conf<-confusionMatrix(test1$Survived, prediction1)
conf$table
The accuracy is `r round(100*conf$overall[1],1)`%.
round(100*conf$overall[1],1)
## a key observation is that replacing age is a key swing point.
## survival <- age <- lots of blanks <- pay more attention here
## restore original data
training<-trainingRaw
testing<-testingRaw
require(caret)
set.seed(8675307)
xx <- createDataPartition(y=training$Survived, p=0.90, list=FALSE)
##Define training and test sets
train1<-training[xx,]
test1<-training[-xx,]
train1$Fare<-as.numeric(train1$Fare)
test1$Fare<-as.numeric(test1$Fare)
## Make sure there are no zero fares
train1$Fare[train1$Fare==0]<-mean(train1$Fare)
test1$Fare[test1$Fare==0]<-mean(test1$Fare)
## Treat testing Fare data
testing$Fare[testing$Fare==0]<-mean(testing$Fare)
## Plot cleaned data
require(ggplot2)
p<-ggplot(train1, aes(Fare, Survived)) + geom_point()
p<-p+facet_grid(.~Sex)
p <- p + scale_x_log10()
p<-p+ggtitle("Fare and Survived / Sex")
p
## to create model first get rid of NA rows in Age
trainfull<-train1[is.na(train1$Age)==FALSE, ]
testfull<-test1[is.na(train1$Age)==FALSE, ]
## fit model dependent on Pclass and Sex
agemodel<-glm(Age~Pclass+Sex, data=trainfull)
## First make an extra column of predicted values
ageTestPredict<-predict(agemodel, test1)
test1$AgeModel<-ageTestPredict
ageTrainPredict<-predict(agemodel, train1)
train1$AgeModel<-ageTrainPredict
ageTestingPredict<-predict(agemodel, testing)
testing$AgeModel<-ageTestingPredict
## Fill in NA's with Model values
train1[is.na(train1$Age)==TRUE,"Age"]<-train1[is.na(train1$Age)==TRUE,"AgeModel"]
test1[is.na(test1$Age)==TRUE,"Age"]<-test1[is.na(test1$Age)==TRUE,"AgeModel"]
## treat testing data
testing[is.na(testing$Age)==TRUE,"Age"]<-testing[is.na(testing$Age)==TRUE,"AgeModel"]
control1 <- trainControl(method = "cv")
## calculate logs of Fare data
train1$logFare<-log10(train1$Fare)
test1$logFare<-log10(test1$Fare)
testing$logFare<-log10(testing$Fare)
## the model function
modelfunction <- Survived~Age+factor(Sex)+factor(Pclass)+logFare
## model using random forest
model1 <- train(modelfunction, data = train1, method="rf", trControl = control1, prox=FALSE)
prediction1 <- predict(model1, test1)
hist(prediction1)
test1x<-cbind(prediction1, test1)
p <- ggplot(test1x, aes(Survived, prediction1, color=Sex)) + geom_boxplot()
p <- p+ facet_grid(.~Pclass)
p <- p+ ggtitle("Prediction vs. Survived / Pclass")
p
prediction1[prediction1<0.65]<-0
prediction1[prediction1>=0.65]<-1
prediction1<-as.factor(prediction1)
conf2<-confusionMatrix(test1$Survived, prediction1)
conf2
hist(prediction1)
?pairs
pairs(training)
pairs(Survived~ Gender + Sex + Fare, training)
pairs(Survived~ Gender + Sex + Fare, training)
install.packages("GGally")
library(GGally)
ggpairs(training, columns=c("Fare", "Sex", "Pclass"))
ggpairs(training, columns=c("Sex", "Pclass"))
ggpairs(training, columns=c("Survived", "Sex", "Pclass"))
pairs(training[c(2, 3, 5:8)])
ggpairs(training[c(2, 3, 5:8)])
ggpairs(training[c(2, 3, 5, 6)])
testing <-  readData(Titanic.path, test.data.file, test.column.types, missing.types)
Survived<-predictionT-1
## this section gets the data and loads it into training and testing data files
## get data sets from github repo
## use read data steps from the dude
library(RCurl)
readData <- function(path.name, file.name, column.types, missing.types) {
myData<-getURL(  paste0(path.name, file.name) )
read.csv(textConnection(myData),
colClasses=column.types,
na.strings=missing.types )
}
Titanic.path <- "https://raw.githubusercontent.com/ww44ss/Titanic/master/"
train.data.file <- "train.csv"
test.data.file <- "test.csv"
missing.types <- c("NA", "")
train.column.types <- c('integer',   # PassengerId
'factor',    # Survived
'factor',    # Pclass
'character', # Name
'factor',    # Sex
'numeric',   # Age
'integer',   # SibSp
'integer',   # Parch
'character', # Ticket
'numeric',   # Fare
'character', # Cabin
'factor'     # Embarked
)
test.column.types <- train.column.types[-2]     # # no Survived column in test.csv
setwd("/Users/winstonsaunders/Documents/TitanicKaggle")
##Okay let's get the data
training <- readData(Titanic.path, train.data.file, train.column.types, missing.types)
testing <-  readData(Titanic.path, test.data.file, test.column.types, missing.types)
trainingRaw<-training
testingRaw<-testing
## map missing data by provided feature
require(Amelia)
missmap(training, main="Titanic Training Data - Missings Map",
col=c("wheat", "darkorange4"), legend=FALSE, y.cex=1)
library(GGally)
ggpairs(training[c(2, 3, 5, 6)])
## Clean the data
## calculate the median age for the population, men and women
meanAge<-mean(training$Age[is.na(training$Age)==FALSE])
meanMaleAge<-median(training$Age[training$Sex=="male"&is.na(training$Age)==FALSE])
meanFemaleAge<-median(training$Age[training$Sex=="female"&is.na(training$Age)==FALSE])
## substitute median ages based on sex
training$Age[is.na(training$Age)&training$Sex=="male"]<-meanMaleAge
training$Age[is.na(training$Age)&training$Sex=="female"]<-meanFemaleAge
testing$Age[is.na(testing$Age)&testing$Sex=="male"]<-meanMaleAge
testing$Age[is.na(testing$Age)&testing$Sex=="female"]<-meanFemaleAge
training$VeryYoung <- 0
training$VeryYoung[training$Age<18]<-1
testing$VeryYoung<-0
testing$VeryYoung[testing$Age<18]<-1
training[1:12,c("Survived", "Age", "Sex", "Pclass", "VeryYoung")]
## This is a first simple model
## create data sub partition
require(caret)
set.seed(8675309)
xx <- createDataPartition(y=training$Survived, p=0.75, list=FALSE)
##Define training and test sets
train1<-training[xx,]
test1<-training[-xx,]
## set up training control
control1 <- trainControl(method = "cv")
## model using random forest
modelfunction<-Survived~Age +Pclass+Sex+factor(VeryYoung)
model1 <- glm(modelfunction,
data = train1, family=binomial("logit"))
prediction1 <- predict(model1, test1)
dim(prediction1)
model1
anova(model1, test="Chisq")
test1
predict(model1, test1)
hist(prediction1)
data = train1, family="rf")
model1 <- glm(modelfunction, data = train1, family="rf")
model1 <- train(modelfunction, data = train1, family="rf", )
model1 <- train(modelfunction, data = train1, family="rf" )
